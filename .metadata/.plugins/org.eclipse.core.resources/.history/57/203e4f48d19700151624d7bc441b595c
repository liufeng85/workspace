# -*- encoding: utf-8 -*-
'''
********************************************************************
    @AUTHOR:  Administrator-Liu(刘峰)
    MAIL:     liufeng@frxs.com
    FROM:     2014年5月14日
********************************************************************
            Copyright (c) 2014-2020  天闻数媒有限公司
======================================================================

Provide a function for the test of web services

'''

__version__ = 2.0
__all__ = [
    'TwsmDPC', 
    'desencode',
    'desdecode',
    ]

import os,re,inspect,xlrd
import frxs_common

ip=  (58, 50, 42, 34, 26, 18, 10, 2,
      60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6,
      64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9 , 1,
      59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7)
 
ip_1=(40, 8, 48, 16, 56, 24, 64, 32,
      39, 7, 47, 15, 55, 23, 63, 31,
      38, 6, 46, 14, 54, 22, 62, 30,
      37, 5, 45, 13, 53, 21, 61, 29,
      36, 4, 44, 12, 52, 20, 60, 28,
      35, 3, 43, 11, 51, 19, 59, 27,
      34, 2, 42, 10, 50, 18, 58, 26,
      33, 1, 41,  9, 49, 17, 57, 25)
 
e  =(32, 1,  2,  3,  4,  5,  4,  5, 
       6, 7,  8,  9,  8,  9, 10, 11, 
      12,13, 12, 13, 14, 15, 16, 17,
      16,17, 18, 19, 20, 21, 20, 21,
      22, 23, 24, 25,24, 25, 26, 27,
      28, 29,28, 29, 30, 31, 32,  1)
  
p=(16,  7, 20, 21, 29, 12, 28, 17,
     1, 15, 23, 26,  5, 18, 31, 10, 
     2,  8, 24, 14, 32, 27,  3,  9,
     19, 13, 30, 6, 22, 11,  4,  25)
 
s=[ [[14, 4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7],
     [0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8],
     [4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0],    
     [15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13]],
 
     [[15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10],     
     [3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5],     
     [0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15],     
     [13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9]],
 
     [[10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8],     
     [13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1],   
     [13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7],     
     [1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12]],
 
    [[7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11,  12,  4, 15],     
     [13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,9],     
     [10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4],     
     [3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14]],
 
 
    [[2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9],     
     [14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6],     
     [4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14],     
     [11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3]],
 
    [[12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11],
     [10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8],     
     [9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6],     
     [4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13]],
 
    [[4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1],     
     [13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6],     
     [1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2],     
     [6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12]],
 
   [[13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7],     
     [1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2],     
     [7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8],     
     [2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11]]]
      
pc1=(57, 49, 41, 33, 25, 17,  9,
       1, 58, 50, 42, 34, 26, 18,
      10,  2, 59, 51, 43, 35, 27,
      19, 11,  3, 60, 52, 44, 36,
      63, 55, 47, 39, 31, 33, 15,
       7, 62, 54, 46, 38, 30, 22,
      14,  6, 61, 53, 45, 37, 29,
      21, 13,  5, 28, 20, 12, 4);
 
pc2= (14, 17, 11, 24,  1,  5,  3, 28,
      15,  6, 21, 10, 23, 19, 12,  4, 
      26,  8, 16,  7, 27, 20, 13,  2, 
      41, 52, 31, 37, 47, 55, 30, 40, 
      51, 45, 33, 48, 44, 49, 39, 56, 
      34, 53, 46, 42, 50, 36, 29, 32)
 
d = (  1,  1,  2,  2,  2,  2,  2,  2, 1, 2, 2, 2, 2, 2, 2, 1)


############################################################        datadriver for xls or xlsx       ############################################################
class FrxsDPC():
    ''' data process center '''
    def __init__(self):
        self.__info_script_pdpc = os.path.abspath(inspect.getfile(inspect.currentframe()))
        self.__xls_file = os.path.join(frxs_common.DATA_PATH,"twsm.xlsx")
    
    def getXlsFile(self):
        ''' get the absolute path of xls file for http 
        Sample usage:
            print getXlsFile()
        '''
        return self.__xls_file
    
    def setXlsFile(self,f_file):
        ''' set the absolute path of Xls file for http 
        Sampel usage:
            setXlsFile(r"D:\auto\python\twsm\com\twsm.xls")
        '''
        f_file = os.path.abspath(f_file)
        if os.path.isfile(f_file):
            self.__xls_file = f_file
        else:
            raise Exception("\n\tfrxs_dpc exception 1.0: invalid director '%s'." %(f_file))
    
    def open_excel(self,excel,sheet):        
        excel_file = os.path.join(frxs_common.DATA_PATH,excel)        
        if os.path.isfile(excel_file):
            excel = xlrd.open_workbook(excel_file)
            self.sheet = excel.sheet_by_name(sheet)
        else:
            raise Exception("\n\tfrxs_dpc exception 2.0: invalid file '%s'." %(excel_file))        
    
    def excel_nrows(self):        
        return self.sheet.nrows
    
    def excel_ncols(self):
        return self.sheet.ncols
    
    def excel_cellxy(self, rowx, colx):
        '''
        Sample usage:
            excel_cellxy(0,0)
            excel_cellxy(1,2)
        Return:
            cell value      
        '''
        
        cell_value = self.sheet.cell(rowx, colx).value
        
        if self.sheet.cell(rowx, colx).ctype in (2,3) and int(cell_value) == cell_value:
            cell_value = int(cell_value)
        
        return str(cell_value)
    
    
    def excel_cell(self, rowx, col_name):
        ''' 
        Sample usage:
            excel_cell(0,"Title")
            excel_cell(0,"Name")
        return:
            the cell value that the row is rowx and column is col_name you specify. 
        '''        
        for colx in xrange(0, self.excel_ncols()):
            if self.excel_cellxy(0, colx) == col_name:
                #log.step_normal("ExcelSheet.cellx(%s, %s)=[%s]" % (rowx, col_name, self.cellxy(rowx, colx)))
                #print "ExcelSheet.cellx(%s, %s)=[%s]" % (rowx, col_name, self.excel_cellxy(rowx, colx))
                return self.excel_cellxy(rowx, colx)
    
    ############################################################        Useless functions     ############################################################
    def getXlsValue(self,sheet):
        ''' analize the xls or xlsx file and get the source data
        
        Useless function
        
        Sample usage:
            getXlsValue("Sheet1")
        return:
            self.kword
        '''
        
        self.open_excel(self.__xls_file,sheet)
        
        self.kword = {} 
        # 依据 TestCaseID 获取测试步骤信息
        for i in xrange(1, self.excel_nrows()):            
            scene       = self.excel_cell(i, "Scene")
            case_id     = self.excel_cell(i, "TestCaseID")
            step        = self.excel_cell(i, "Steps")
            interface   = self.excel_cell(i, "Interface")
            obj         = self.excel_cell(i, "Object")
            action      = self.excel_cell(i, "Action")
            value       = self.excel_cell(i, "Value")
            recovery    = self.excel_cell(i, "Recovery")
            comment     = self.excel_cell(i, "Comment")
            
            if not self.kword.has_key(case_id):
                self.kword[case_id]={}
            self.kword[case_id][step] = {"Scene":scene,"Interface":interface,"Object":obj,"Action":action,"Value":value,"Recovery":recovery,"Comment":comment}
        
#         for k,v in self.kword.items():
#             steps=sorted(v.keys())
#             for step in steps:                
#                 print "%s => %s => %s" %(k,step,v[step])

        
    ############################################################        preference  functions for FRXS     ############################################################   
    
    def getXlsDataValue(self):
        ''' analize the xls or xlsx file and get the fixed form data in the sheet named "TestData"
        Sample usage:
            getXlsCaseValue()
        return:
            testData
        '''   
        sheet = "TestData"
        self.open_excel(self.__xls_file,sheet)
        
        testData = {}
        
        for i in xrange(1,self.excel_nrows()):
            testData[i] = {}
            testData[i]["Object"]   = self.excel_cell(i, "Object")
            testData[i]["Action"]   = self.excel_cell(i, "Action")
            testData[i]["Value"]   = self.excel_cell(i, "Value")
        return testData
        
        
        
    def getXlsCaseValue(self):
        ''' analize the xls or xlsx file and get the fixed form data in the sheet named "TestCase"
        Sample usage:
            getXlsCaseValue("Sheet1")
        return:
            testSet
        '''
        
        sheet = "TestCase"
        self.open_excel(self.__xls_file,sheet)
        
        # 依据 TestCaseID 获取测试步骤信息
        testSet = {}
        
        scene = ""
        for i in xrange(1, self.excel_nrows()):
            scene_tmp = self.excel_cell(i, "Scene")
            if not scene == scene_tmp and scene_tmp:
                scene = scene_tmp
                
            case_id         = self.excel_cell(i, "TestCaseID")
            if not case_id:
                continue
             
            case_name       = self.excel_cell(i, "TestCaseName")
            case_level      = self.excel_cell(i, "TestCaseLevel")
            prepare         = self.excel_cell(i, "Prepare")
            steps           = self.excel_cell(i, "Steps")
            expect_result   = self.excel_cell(i, "ExpectResult")
            test_result     = self.excel_cell(i, "TestResult")
            comment         = self.excel_cell(i, "Comment")          
            
            prepare         = self.__generateCaseSteps(prepare)
            steps           = self.__generateCaseSteps(steps)
            expect_result   = self.__generateCaseSteps(expect_result)            
            
            testSet[case_id]={
                            "SceneName":scene,
                            "TestCaseName":case_name,
                            "TestCaseID":case_id,                        
                            "TestCaseLevel":case_level,
                            "Prepare":prepare,
                            "Steps":steps,
                            "ExpectResult":expect_result,
                            "TestResult":test_result,
                            "Comment":comment                            
                        }
            
        return testSet           
        
    def __generateCaseSteps(self,strs):
        ''' format the string to steps 
        Sample usage:
            steps = __generateCaseSteps("asdfasdfsdf")
            steps = __generateCaseSteps("1.asdfasdfsdf\n2.sodfi")
        '''   
        result = {}
        prog_step   = re.compile("(\d+)\.(.*)");# 指定测试步骤应具有的，字符串格式.如 1.开启模式{TestData:12}
        prog_msg    = re.compile(".*\{(.*)\}.*");# 指定测试步骤中，使用测试数据的，模板格式。如{TestData:12}
        prog_testdata   = re.compile("(.+):(\d+$)");# 指定使用测试数据的，关键字应具有的格式. 如 TestData:12
            
        if strs:
            step_string = prog_step.findall(strs)
            if step_string:
                for step in step_string:
                    result["Step_%s_info" %step[0]] = step[1]
                    template_string = prog_msg.search(step[1])                    
                    if template_string:                        
                        result["Step_%s" %step[0]] = template_string.group(1) 
            else:
                result["Step_1_info"] = strs
        return result
    
    def test(self):
        pass  

